// Esse Script desenha o Curva de Koch
//load(fix_path("C:\Users\stefa\Área de Trabalho\Coding and Programing\Algoritmo Genetico\LogP_Koch\drawLogP.ael"));

defun drawstripline (Ws, Ls, Lstub){
	decl cond = db_get_layerid(context, "cond", "drawing");
	decl cond2 = db_get_layerid(context, "cond2", "drawing");

	decl p1 = [-Ws/2, 0];
	decl p2 = [Ws/2, Ls];

	decl line = db_add_rectangle(context, cond, p1[0], p1[1], p2[0], p2[1]);
	decl linegnd = db_add_rectangle(context, cond2, p1[0], p1[1], p2[0], p2[1]);
	
	//Draw Stub
	decl stub = db_add_rectangle(context, cond, p2[0], p2[1], p1[0], p2[1]+Lstub);
	decl stubgnd = db_add_rectangle(context, cond2, p2[0], p2[1], p1[0], p2[1]+Lstub);
}

defun curve(p1, p2, layer){
	db_set_path_width(context, 0.5);
	db_set_path_endcap(context, DB_SQUARE_CAP_THAT_EXTENDS_HALF_WIDTH);	
	db_add_path(context);
	db_add_point(context, p1[0], p1[1]);
	db_add_point(context, p2[0], p2[1]);	
	
	decl dbShape = db_end(context, layer);
}

defun kochCurve (p1, p2, degree){
	
	decl theta = PI/3;
	
	decl layerList = list("cond","resi","diel","diel2","hole","bond");
	decl layer = db_get_layerid(context, layerList[degree], "drawing");
	
	curve(p1, p2, layer);

	
	if(degree > 0){
		
		decl p3 = [(2*p1[0]+p2[0])/3,(2*p1[1]+p2[1])/3];
		decl p5 = [(2*p2[0]+p1[0])/3,(2*p2[1]+p1[1])/3];
 
		decl p4 = [p3[0] + (p5[0] - p3[0])*cos(theta) + (p5[1] - p3[1])*sin(theta),p3[1] - (p5[0] - p3[0])*sin(theta) + (p5[1] - p3[1])*cos(theta)];
 
		kochCurve(p1,p3,degree-1);
		kochCurve(p3,p4,degree-1);
		kochCurve(p4,p5,degree-1);
		kochCurve(p5,p2,degree-1);		
	};
}

defun clearLayers (degree){
	
	decl layerList = list("cond","resi","diel","diel2","hole","bond");
	
	
	while (degree > 0){
		decl layerId = db_get_layerid(context, layerList[degree]);
		db_select_all_on_layerid(context, layerId );
		db_delete_selected(context);
		degree--;
		};
}

defun definePorts (){
	decl cond = db_get_layerid(context, "cond", "drawing");
	decl cond2 = db_get_layerid(context, "cond2", "drawing");
	decl x_pin = 0;
	decl y_pin = 0.1;
	
	
	db_create_pin(context, x_pin, y_pin, 0, cond, 1, "P1");
	db_create_pin(context, x_pin, y_pin, -90, cond2, 2, "P2");
}

defun runSimulation(Subst){
	decl portDefinitions = list(list(list("P1"), list("P2"), 50.0, 0.0, PORT_CALIBRATION_NONE, 0.0));
	db_set_port_definitions(context, portDefinitions);
	
	decl emSetup = list("Kappa438_60", "Duroid5880", "Duroid6006", "Duroid6010");

	deem_run_em_setup(de_get_current_design_context(), "Kappa438_60"); //emSetup[Subst]);
}

defun ADS_drawKochCurve(n, L, degree, pos){	
	decl p1 = [-L/2, -15];
	decl p2 = [L/2, -15];

	decl H = L/3*sin(PI/3);
	
	decl cond = db_get_layerid(context, "cond", "drawing");
	decl cond2 = db_get_layerid(context, "cond2", "drawing");

	kochCurve (p1, p2, degree);
	clearLayers(degree);
	de_select_range(p1[0],p1[1], p2[0],p2[1]-H, 1); 
	de_union();

	// de_set_scale(scl, scl);
	// de_scale(p1[0],p1[1]);
	
	// de_select_item(p1[0],p1[1]);

	if(n%2 != 0){
		de_move(pos[0]-p1[0], pos[1]-p1[1]);
		if (n == 3){
			de_move_to_layerid(context, cond2);}
	}
	else{
		de_move(-pos[0]-p1[0]-(L), pos[1]-p1[1]);
		if (n == 0 || n == 4){
			de_move_to_layerid(context, cond2);}
	
	}
	
	db_deselect_all(context);
}


defun ADS_drawLogP(Ws, Ls, Lstub, Degree, Lmon, Ymon, Subst){
	de_select_all();
	de_delete();

	drawstripline(Ws, Ls, Lstub);
	
	decl i;
	for (i=0; i<6; i++){			
		ADS_drawKochCurve(i, Lmon[i] , Degree[i], [Ws/2, Ymon[i]]);
	};
	
	definePorts();
	runSimulation(Subst);
}	

de_open_workspace("C:\Users\stefa\ADS_wrk\Koch_LogPer_wrk");

